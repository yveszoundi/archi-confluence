#+TITLE: README

* What is this?

This is a set of [[https://www.archimatetool.com/][Archi]] scripts for [[https://www.atlassian.com/software/confluence][Confluence]] integration. Often diagrams need to be shared via multiple channels (presentation decks, Confluence pages, chat, etc.).

*This has been tested with recent versions of Archi and Confluence Cloud (1000+ build version).*

The scripts provide the following functionality:
- A "convenient" dialog stores =Confluence= settings (URL, API token, etc.)
- A "pipeline definition" can be created for updating one or multiple pages to =Confluence= directly from =Archi=

* How is this being used?

This is used for publishing =Confluence= pages with [[https://en.wikipedia.org/wiki/ArchiMate][Archimate]] diagrams and their associated documentation (=Documentation= text in diagram =Properties=).
Eventually, a slightly modified version of this work might get hooked to a CI/CD pipeline (with [[https://github.com/yveszoundi/archi-humaneimage][Humane Image scripts]], etc.).

** Confluence settings dialog screenshot

[[./images/settings_screenshot.png]]

** Confluence pipeline definition screenshot

[[./images/pipeline_screenshot.png]]

* What are the requirements?

- [[https://www.archimatetool.com/download/][Archi 4.9.x]] or later
- The latest version of [[https://www.archimatetool.com/plugins/#jArchi][jArchi]] compatible with Archi 4.9.x or later
- The [[https://www.graalvm.org/][GraalVM]] JavaScript engine selected in Archi preferences (=Scripting > JavaScript Engine=)

* How can you use this?

Please link the contents of this repository under your jArchi scripts folder (=Preferences >Scriting > Scripts folder:=): if you still don't understand the procedure, please visit the [[https://github.com/archimatetool/archi-scripting-plugin/wiki/jArchi-Quick-Start][jArchi wiki]] or [[https://forum.archimatetool.com/index.php?board=5.0][forum]].

You can then right-click on any diagram in =Archi= and explore available scripts (=Scripts= context menu).

** Concepts

An /archi-Confluence page/ is modeled as a =Group= element on a =Sketch= diagram:
- An /archi-Confluence page/ contains either nested sections (=Group=) or references to diagrams (Canvas, Sketch or default Archimate diagrams).
- Within an /archi-Confluence page/, the flow between sections is specified via =connections=. All page contents but the last element, must point to something (either a section or diagram reference).
  
An /archi-Confluence pipeline/ contains one or multiple /archi-Confluence pages/:
- If you don't select anything on a sketch diagram, all the 'archi-Confluence pages' will be published.
- Alternatively, you can select specific /archi-Confluence pages/ to publish.

Notes: *The name of archi-Confluence page* is used as Confluence page title (retrieve existing page information by title and Confluence space). Maybe it will be possible to override it via a diagram property in the future.

** Confluence integration

Diagram documentation and images are published through the [[https://developer.atlassian.com/server/confluence/confluence-rest-api-examples/][Confluence REST API]].
- You, create a [[https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/][Confluence API token]] and keep it in your password manager.
- You, configure Confluence publishing settings in Archi: A utility script provides a dialog that helps persisting Confluence configuration in the Archi =workbench= preferences.
- You, match existing confluence page titles to names of top-level =Group= objects: [[https://community.atlassian.com/t5/Confluence-questions/Create-same-name-pages-within-a-space/qaq-p/1216332][Page titles are unique in Confluence within a given space]] (/space key/).
- The scripts, render any documentation associated to a view or 'section' using markdown (view/section documentation is parsed as Markdown and converted to HTML
- The scripts, export diagrams as PNG binary data: It is possible to skip uploading diagrams by specifying a =ContentOnly= diagram property ("YES" or "TRUE" values).
- The scripts, publish text and image contents to Confluence accordingly to desired sections.

** Design decisions

It is more flexible to use =Sketch= diagrams than =Canvas= or =regular Archimate views=.
- You can connect directly 'view references' to each other, without additional nesting.
- The allowed structure is simple: groups, view references & connections.

For now, the scripts don't auto-create non-existent Confluence pages: this may or may not be desirable (human errors, etc.).

* Can you customize text rendering?

When a diagram has a non-empty "Documentation" property, the documentation will be published along with its diagram, for a given "Archimate View".

- Behind the scenes, a markdown renderer will interpret Documentation text as [[https://www.markdownguide.org/basic-syntax/][Markdown]] and convert it to HTML.
- Essentially, you can use any valid markdown markup supported by [[https://marked.js.org/][marked.js]] (tables, bullet lists, etc.).

* How to contribute?

The best way to contribute is via a pull request.
